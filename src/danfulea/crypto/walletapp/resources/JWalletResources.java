package danfulea.crypto.walletapp.resources;

import java.util.ListResourceBundle;

/**
 * resources for JWallet
 * 
 * 
 * @author Dan Fulea, 28 MAR. 2010.
 * 
 */

public class JWalletResources extends ListResourceBundle {

	/**
	 * Returns the array of strings in the resource bundle.
	 * 
	 * @return the resources.
	 */
	public Object[][] getContents() {
		return CONTENTS;
	}

	/** The resources to be localised. */
	private static final Object[][] CONTENTS = {
			
			{ "form.icon.url", "/danfulea/crypto/walletapp/resources/personal.png" },//"/danfulea/crypto/walletapp/resources/personal.jpg" },
			{ "logo.icon.url", "/danfulea/crypto/walletapp/resources/personal.png" },//"/danfulea/crypto/walletapp/resources/Kerrigan.jpg" },
			{ "about.icon", "/danfulea/crypto/walletapp/resources/about.gif" },
			{ "exit.icon", "/danfulea/crypto/walletapp/resources/exit.gif" },
			{ "new.icon", "/danfulea/crypto/walletapp/resources/new.gif" },
			{ "open.icon", "/danfulea/crypto/walletapp/resources/open.gif" },
			{ "save.icon", "/danfulea/crypto/walletapp/resources/save.gif" },
			{ "help.icon", "/danfulea/crypto/walletapp/resources/help.gif" },
			{ "ok.icon", "/danfulea/crypto/walletapp/resources/ok.gif" },
			{ "cancel.icon", "/danfulea/crypto/walletapp/resources/cancel.gif" },
			
			{ "Application.NAME",
					"JWallet: (AES 256 bits + SHA-256) or (AES 128 bits + MD5)" },
			{"About.NAME", "About" },//AboutFrame requires this
			
			{ "Author", "Author:" },
			{ "Author.name", "Dan Fulea , fulea.dan@gmail.com" },

			{ "Version", "Version:" },
			{ "Version.name", "MyJWallet 0.5" },

			{ "License.name", "BSD License"},
			
			{ "License",
			"Copyright (c) 2016, Dan Fulea, fulea.dan@gmail.com \nAll rights reserved.\n\nRedistribution and use in source and binary forms, "
			+ "with or without modification, are permitted provided that the following conditions are met:\n\n"
			+ "1. Redistributions of source code must retain the above copyright notice, this list of conditions and the "
			+ "following disclaimer.\n\n"
			+ "2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and "
			+ "the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n"
			+ "3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or "
			+ "promote products derived from this software without specific prior written permission.\n\n"
			+ "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES,"
			+ " INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE"
			+ " ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, "
			+ "INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE "
			+ "GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY "
			+ "OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY "
			+ "WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n" },

			
			{"Infos",
					"User password is transformed into an valid key for "
					+ "the \nencryption/decryption algorithm. The application encryption/decryption \nalgorithm is"
					+ " AES/CBC/PKCS5Padding and it is considered the best \navailable! It uses a"
					+ " default 256 bits key, which is strong enough \nfor any purpose. See java"
					+ " documentation from java sun website (just \ngoogle it!). This 256 bits"
					+ " key is generated by using a message digest \nSHA-256 algorithm on user "
					+ "input password! \n\nThis application uses the advanced SecureRandom class "
					+ "for random \nnumber generator.\n\nFor training purpose only (can be considered"
					+ " redundant), it is used an \n8 bytes salt and it is performed 1000 iterations"
					+ " in order to derive \nthe 'fingerprints' of initial user password using"
					+ " the message digest \nalgorithm. However, initial 'fingerprints' (without"
					+ " using the salt and \niterations) should be enough because: \n\nTHE "
					+ "ENCRYPTION KEY IS NEVER STORED BY THIS APPLICATIONS! \nIT EXISTS ONLY IN "
					+ "THE MIND OF THE USER AND IT IS DERIVED AT RUNTIME \nFROM THE USER "
					+ "PASSWORD! THEREFORE ANY ATTEMPT OF REVERSE ENGINEERING \nTHE ENCRYPTION"
					+ " KEY WILL FAIL! \n\nDefault JRE provided by Sun Java does not work with"
					+ " 256 bits AES \nencryption key, so if user plans to use this JRE, he can"
					+ " only use the \nMD5 message digest algorithms which generates an 128 bits "
					+ "AES \nencryption key. \nIn order to run the SHA-256 hash algorithm which "
					+ "generates an \n256 bits AES encryption key, the user must download "
					+ "unlimited \nencryprion policy jars and override the default jars in "
					+ "JAVA_HOME \nfolder. \n\nA weak password can easily be broken! \nBest "
					+ "scenario: use a strong password (10 characters minimum) and 256 \nbits "
					+ "AES encryption key (or 128 bits if standard JRE is installed) \nwhich "
					+ "means using SHA-256 algorithm (or MD5 if standard JRE is \ninstalled) for "
					+ "message digest. \n\nButtons are straightforward: \nNEW = resetting text "
					+ "for new entry \nOPEN = open an existing encrypted file \nSAVE = save text"
					+ " in an encrypted file \nABOUT = display some application informations and"
					+ " FREEWARE licence \nHELP = this frame \nCLOSE = terminate the "
					+ "apllication \nEncryption/decryption is performed choosing 128 bits or "
					+ "256 bits \nAES key from the radiobutton controls. \n\nFinal notes: \nChoose"
					+ " only letters, numbers and '_' (underscore symbol) for \nfilenames! "
					+ "See the exemple in 'Data' folder. \n" },

			{ "mainPanel.textArea.label", "Important notes:" },

			{ "menu.file", "File" },
			{ "menu.file.mnemonic", new Character('F') },

			{ "menu.file.new", "New" },
			{ "menu.file.new.mnemonic", new Character('N') },
			{ "menu.file.new.toolTip", "New entry" },

			{ "menu.file.open", "Open" },
			{ "menu.file.open.toolTip",
					"Open an encrypted file. The file contents are decrypted and displayed!" },
			{ "menu.file.open.mnemonic", new Character('O') },

			{ "menu.file.save", "Save" },
			{ "menu.file.save.mnemonic", new Character('S') },
			{ "menu.file.save.toolTip",
					"Save these important notes in an encrypted file" },

			{ "menu.file.exit", "Close" },
			{ "menu.file.exit.mnemonic", new Character('C') },
			{ "menu.file.exit.toolTip", "Close the application" },

			{ "menu.help", "Help" },
			{ "menu.help.mnemonic", new Character('H') },

			{ "menu.help.about", "About..." },
			{ "menu.help.about.mnemonic", new Character('A') },
			{ "menu.help.about.toolTip",
					"Several informations about this application" },

			{ "menu.help.help", "Help..." },
			{ "menu.help.help.mnemonic", new Character('e') },
			{ "menu.help.help.toolTip", "Read me!" },

			{ "key.128", "128 bits" },
			{ "key.256", "256 bits" },
			{ "key.label", "AES encryption key: " },

			

			{ "file.extension", "wlt" },
			{ "file.description", "JWallet file" },

			{ "status.wait", "Waiting for your action!" },
			{ "status.new", "New entry awaiting!" },
			{ "status.open", "Open: " },
			{ "status.save", "Save: " },
			{ "status.decrypt", "Decryption done: " },
			{ "status.encrypt", "Encryption done: " },

			{ "dialog.exit.title", "Confirm..." },
			{ "dialog.exit.message", "Are you sure?" },
			{ "dialog.exit.buttons", new Object[] { "Yes", "No" } },

			{ "dialog.overwrite.title", "Overwriting..." },
			{ "dialog.overwrite.message", "Are you sure?" },
			{ "dialog.overwrite.buttons", new Object[] { "Yes", "No" } },

			{ "passwordFrame.title", "Password box" },
			{ "passwordFrame.okB", "Ok" },
			{ "passwordFrame.okB.mnemonic", new Character('O') },
			{ "passwordFrame.cancelB", "Cancel" },
			{ "passwordFrame.cancelB.mnemonic", new Character('C') },
			{ "passwordFrame.pass", "Enter the password" },
			{ "passwordFrame.pass.new", "Enter new password" },
			{ "passwordFrame.pass.check", "Re-enter your password" },

			{ "dialog.inputPass.wrong", "More than five characters are needed." },
			{ "dialog.inputPass.wrong.check", "Passwords not match!" },

			{ "error.encrypt", "Error: encryptFile()" },
			{ "error.decrypt", "Error: decryptFile()" }, };

}
